(ns user
  (:require 
            [fantasy-football.core :as core]
            [fantasy-football.data :as data]
            [fantasy-football.fields :as fields]
            [clojure.pprint :refer [pp pprint]]
            [clojure.repl :refer [doc]]
            [clojure.string :as string]
            [clojure.tools.namespace.repl :refer [refresh]]))

(defn test-ns
  "A confirmation function to run from the user REPL" []
  "user namespace active.")

;;(defn setup
;;  "Activate MongoDB connection to test database.  Run this to create a var
;;  named db that can then be used to pass to functions like
;;  db/retrieve-maps." []
;;  (defonce db (db/mongo-setup (db/create-conn config/host config/port)
;;                              config/db config/user config/pwd)))

(defn verify-all-of-correct-type
  [collection & types]
  (if (seq collection)
    (let [element (into {} (first collection))
          k (keys element)
          v (vals element)]
      (if-not (some #{(type (first v))} types)
        (println "Doesn't")
        (println "\t DOES"))
      (map #(println (element %)) k)
        
)))

(defn print-all
  [collection]
  (if (seq collection)
    (let [element (into {} (first collection))
          k (keys element)
          v (vals element)]
      (println element)
      (recur (rest collection)))))
;     (map #(if-not (some #{types} (element %))
;             (do
;               (println "MISSING VALUE!")
;               (println (str "Key: " %))
;               (println element)
;                        
;             )) k))))
    

(defn tst 
  [& x]
  (if (some #{3} x)
    (println "Has it")
    (println "\tNope")))
