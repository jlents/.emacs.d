(ns hello-compojure.core.handler
  (:require [compojure.core :refer :all]
            [compojure.route :as route]
            [compojure.handler :as handler]
            [ring.middleware.defaults :refer [wrap-defaults site-defaults]]
            [ring.middleware.json :refer [wrap-json-response wrap-json-body]]
            [clojure.pprint :refer [pp pprint]]
            [hello-compojure.database :as db]))

(defn get-map
  [req]
  {:status 200
   :headers {"Content-Type" "text/html; charset=utf-8"}
   :body (str (db/get-map "thing" (:params req))) })
;   :body (str (type req))})
;   :body (str (db/find-one "thing" {}))})

(defn get-maps
[req]
  {:status 200
   :headers {"Content-Type" "text/html; charset=utf-8"}
   :body (str (into [] (db/get-maps "thing" (:params req)))) })
  

(defroutes app-routes
  (GET "/request" request (str request))
  (route/resources "/")
  (GET "/hello" [] (str "<h1>Hello World</id>"))
  (GET ["/:id", :id #"[0-9]+"] [id] (str "<h1>Hello " id "</id>")) 
  (GET "/inline/:id{[A-Z]+}" [id] (str "<h1>Hello " id "</id>")) 
  (GET "/mapvar/:foo" {{baz :foo} :params} (str "Foo = " baz))
  (context "/nested/:id" [id]
           (GET "/tada" [] (str "<h1>I'm Nested!!!! : " id "</h1>")))
  (context "/mongo" []
           (GET "/find-one" {params :params} (get-map params))
           (GET "/find" {params :params} (get-maps params)))
  (route/not-found "Not Found"))

;; (def app
;;   (wrap-defaults app-routes site-defaults))
(defn simple-logging-middleware 
  "Currently just prints to the output, but we'll use this to log requests"
  [app]
  (fn [req]
;    (println req)
    (app req)))

(def app
  (-> app-routes
      (wrap-defaults site-defaults)
      simple-logging-middleware
      wrap-json-body
      wrap-json-response))
