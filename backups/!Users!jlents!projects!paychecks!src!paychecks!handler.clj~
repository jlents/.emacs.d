(ns paychecks.handler
  (:require [paychecks.routing :as routing]
            [cled.security :as security]
            [compojure.core :refer :all]
            [compojure.handler :as handler]
            [compojure.route :as route]
            [cheshire.core :refer :all :as cheshire]
            [ring.util.response :as resp]
            [ring.util.servlet :as servlet]
            [ring.adapter.jetty :as jetty]
            [slingshot.slingshot :refer [throw+ try+]])
  (:import [org.springframework.security.core.context SecurityContextHolder]
           [org.eclipse.jetty.servlet ServletHolder ServletContextHandler FilterHolder]
           [org.springframework.web.context ContextLoaderListener]
           [org.springframework.web.filter DelegatingFilterProxy]
           [java.security Security]
           [java.security.cert PKIXParameters]
           [java.security KeyStore]))

(defn wrap-reload-spring [app]
  "Reload the Spring application context on every HTTP request."
  (fn [req]
    (let [application-context (security/application-context req)]
      (app req))))

(defn gen-routes [entity-config]
  (apply routes [(GET "/" {params :params body :body}
                      (do ((:access-list entity-config))
                          ((:routing-list entity-config) entity-config params body)))
                 (POST "/" {params :params body :body}
                       (do ((:access-create entity-config))
                           ((:routing-create entity-config) entity-config params body)))
                 (PUT "/" {params :params body :body}
                      (do ((:access-bulk-update entity-config))
                          ((:routing-bulk-update entity-config) entity-config params body)))
                 (HEAD "/:id" {params :params body :body}
                       (do ((:access-head entity-config))
                           ((:routing-head entity-config) entity-config params body)))
                 (GET "/:id" {params :params body :body}
                      (do ((:access-show entity-config))
                          ((:routing-show entity-config) entity-config params body)))
                 (PUT "/:id" {params :params  body :body}
                      (do ((:access-update entity-config))
                          ((:routing-update entity-config) entity-config params body)))
                 (DELETE "/:id" {params :params body :body}
                         (do ((:access-delete entity-config))
                             ((:routing-delete entity-config) entity-config params body)))
                 (GET "/:id/check" {params :params body :body}
                      (do ((:access-check entity-config))
                          ((:routing-check entity-config) entity-config params body)))]))

(defroutes app-routes
  (context (:url entities/delivery_order_report) [] (gen-routes entities/delivery_order_report))
  (context (:url entities/delivery_order_requirement) [] (gen-routes entities/delivery_order_requirement))
  (context (:url entities/delivery_order) [] (gen-routes entities/delivery_order))
  (context (:url entities/ln_linguist_incident) [] (gen-routes entities/ln_linguist_incident))
  (context (:url entities/ln_linguist) [] (gen-routes entities/ln_linguist))
  (context (:url entities/linguist_incident) [] (gen-routes entities/linguist_incident))
  (context (:url entities/linguist) [] (gen-routes entities/linguist))
  (context (:url entities/organization) [] (gen-routes entities/organization))
  (context (:url entities/role) [] (gen-routes entities/role))
  (context (:url entities/transfer_request) [] (gen-routes entities/transfer_request))
  (context (:url entities/user) [] (gen-routes entities/user))
  (context (:url entities/vendor) [] (gen-routes entities/vendor))
  (GET "/" [] (resp/redirect "/index.html"))
  (route/resources "/")
  (route/not-found "Not Found"))

(defn wrap-error-handling [handler]
  (fn [req]
    (try+
     (handler req)
     (catch [:type :web] {:keys [status message]}
       {:status status
        :headers {"Content-Type" "text/html; charset=utf-8"}
        :body message}))))

(def app
  (-> (handler/site app-routes)
      (wrap-reload-spring)
      (wrap-error-handling)))
